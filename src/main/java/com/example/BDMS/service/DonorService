package com.blooddonation.service;

import com.blooddonation.dto.DonorResponse;
import com.blooddonation.exception.ResourceNotFoundException;
import com.blooddonation.model.Donor;
import com.blooddonation.model.User;
import com.blooddonation.repository.DonorRepository;
import com.blooddonation.repository.UserRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Service;

@Service
@RequiredArgsConstructor
public class DonorService {
    
    private final DonorRepository donorRepository;
    private final UserRepository userRepository;

    public DonorResponse getCurrentDonorProfile() {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        String email = authentication.getName();
        
        User user = userRepository.findByEmail(email)
                .orElseThrow(() -> new ResourceNotFoundException("User not found"));
        
        Donor donor = donorRepository.findByUserEmail(email)
                .orElseThrow(() -> new ResourceNotFoundException("Donor profile not found"));
        
        return DonorResponse.builder()
                .name(user.getFirstName() + " " + user.getLastName())
                .email(user.getEmail())
                .bloodType(donor.getBloodType())
                .lastDonationDate(donor.getLastDonationDate())
                .eligibleToDonate(donor.isEligibleToDonate())
                .build();
    }
}